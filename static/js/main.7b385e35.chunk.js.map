{"version":3,"sources":["components/Nametag.js","components/NametagList.js","containers/App.js","serviceWorker.js","index.js"],"names":["Nametag","console","log","this","props","person","onAnimationStart","onMouseLeave","id","className","event","name","isHovering","height","mass","gender","homeworld","includes","Component","NametagList","people","getHomeWorld","map","i","key","App","state","handleExit","bind","handleStart","a","Promise","all","fetch","homeWorldData","json","homeWorld","forEach","setState","getRemainingData","films","film","then","r","title","species","result","vehicles","vehicle","starships","starship","peopleData","peeps","results","getPeople","nametag","target","setTimeout","offsetHeight","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b385e35.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Nametag extends Component {\n  componentWillUnmount() {\n    console.log(\"hello\");\n  }\n  render() {\n    const { person, onAnimationStart, onMouseLeave, id } = this.props;\n    return (\n      <div\n        className=\"nametag flex flex-column justify-center items-center box ba b--yellow white br4 ph4 mv3 f3\"\n        onAnimationStart={(event) => {\n          return onAnimationStart(event, id);\n        }}\n        onMouseLeave={() => {\n          return onMouseLeave(id);\n        }}\n      >\n        <h3>{person.name}</h3>\n        {person.isHovering && (\n          <div className=\"\">\n            <p>height: {person.height}</p>\n            <p>mass: {person.mass}</p>\n            <p>gender: {person.gender}</p>\n            <p>\n              homeworld:{\" \"}\n              {person.homeworld.includes(\"http\")\n                ? \"loading...\"\n                : person.homeworld}\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Nametag;\n","import React from \"react\";\nimport Nametag from \"./Nametag\";\n\nconst NametagList = ({\n  onAnimationStart,\n  onMouseLeave,\n  people,\n  getHomeWorld\n}) => {\n  return (\n    <div className=\"flex flex-wrap mh3 justify-around\">\n      {people.map((person, i) => {\n        return (\n          <Nametag\n            key={person.name}\n            onAnimationStart={onAnimationStart}\n            onMouseLeave={onMouseLeave}\n            person={person}\n            id={i}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default NametagList;\n","import React, { Component } from \"react\";\nimport NametagList from \"../components/NametagList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      people: [],\n    };\n    this.handleExit = this.handleExit.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n  }\n  componentDidMount() {\n    const getPeople = async () => {\n      const getHomeWorld = async () => {\n        const people = await Promise.all(\n          this.state.people.map(async (person) => {\n            const homeWorldData = await fetch(person.homeworld);\n            const homeWorld = await homeWorldData.json();\n            person.homeworld = homeWorld.name;\n            return person;\n          })\n        );\n        this.state.people.forEach((person, i) => {\n          if (person.isHovering === true) {\n            people[i].isHovering = true;\n          }\n        });\n        this.setState({ people });\n      };\n      const getRemainingData = async () => {\n        const people = await Promise.all(\n          this.state.people.map(async (person) => {\n            const [films, species, vehicles, starships] = [\n              await Promise.all(\n                person.films.map(\n                  async (film) =>\n                    await fetch(film)\n                      .then((r) => r.json())\n                      .then((r) => r.title)\n                )\n              ),\n              await fetch(person.species)\n                .then((result) => result.json())\n                .then((result) => result.name),\n              await Promise.all(\n                person.vehicles.map(\n                  async (vehicle) =>\n                    await fetch(vehicle)\n                      .then((result) => result.json())\n                      .then((r) => r.name)\n                )\n              ),\n              await Promise.all(\n                person.starships.map(\n                  async (starship) =>\n                    await fetch(starship)\n                      .then((result) => result.json())\n                      .then((r) => r.name)\n                )\n              ),\n            ];\n            person.films = films;\n            person.species = species;\n            person.vehicles = vehicles;\n            person.starships = starships;\n            return person;\n          })\n        );\n        this.setState({ people });\n      };\n      const peopleData = await fetch(\"https://swapi.dev/api/people/\");\n      const peeps = await peopleData.json();\n      this.setState({\n        people: peeps.results.map((person) => {\n          person.isHovering = false;\n          return person;\n        }),\n      });\n      getHomeWorld();\n      getRemainingData();\n    };\n    getPeople();\n  }\n\n  handleStart(event, id) {\n    const nametag = event.target;\n    const people = [...this.state.people];\n    people[id] = { ...people[id] };\n    setTimeout(() => {\n      if (nametag.offsetHeight > 270) {\n        people[id].isHovering = true;\n        this.setState({ people });\n      }\n    }, 150);\n  }\n\n  handleExit(id) {\n    const people = [...this.state.people];\n    people[id] = { ...people[id] };\n    people[id].isHovering = false;\n    this.setState({ people });\n  }\n\n  render() {\n    return (\n      <div className=\"tc box\">\n        <h1 className=\"f-headline ma0 white\">\n          <img\n            alt=\"Star Wars\"\n            src=\"http://loodibee.com/wp-content/uploads/Star-Wars-transparent-logo-300x300.png\"\n            height=\"300px\"\n          />\n        </h1>\n        <div>\n          <NametagList\n            onAnimationStart={this.handleStart}\n            onMouseLeave={this.handleExit}\n            people={this.state.people}\n          />\n        </div>\n        <div className=\"mv6\">\n          <img\n            alt=\"C-3P0\"\n            src=\"https://www.thewrap.com/wp-content/uploads/2019/12/the-worst-parts-of-star-wars-the-rise-of-skywalker-episode-ix.jpg\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}