{"version":3,"sources":["components/Nametag.js","components/NametagList.js","containers/App.js","serviceWorker.js","index.js"],"names":["Nametag","person","state","isHovering","name","height","mass","gender","handleExit","bind","handleStart","event","nametag","target","setTimeout","setState","offsetHeight","console","log","this","id","className","onAnimationStart","onMouseLeave","Component","NametagList","people","map","i","key","App","a","fetch","peopleData","json","peeps","results","getPeople","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4SAgEeA,E,kDA7Db,cAAyB,IAAD,EAAVC,EAAU,EAAVA,OAAU,4BACtB,cAAM,CAAEA,YACHC,MAAQ,CACXC,YAAY,EACZC,KAAMH,EAAOG,KACbC,OAAQJ,EAAOI,OACfC,KAAML,EAAOK,KACbC,OAAQN,EAAOM,QAGjB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAXG,E,6DAcPP,GACf,MAAO,CACLC,YAAaD,EAAMC,c,kCAIXQ,GAAQ,IAAD,OACXC,EAAUD,EAAME,OACtBC,YAAW,WACT,EAAKC,SAAS,CAAEZ,YAAY,MAC3B,KACHW,YAAW,WACLF,EAAQI,aAAe,KACzB,EAAKD,SAAS,CAAEZ,YAAY,MAE7B,O,mCAGS,IAAD,OACXW,YAAW,WACT,EAAKC,SAAS,CAAEZ,YAAY,IAC5Bc,QAAQC,IAAI,KACX,M,+BAGK,IAAD,EACgCC,KAAKjB,MAApCE,EADD,EACCA,KAAMC,EADP,EACOA,OAAQC,EADf,EACeA,KAAMC,EADrB,EACqBA,OAC5B,OACE,yBACEa,GAAG,UACHC,UAAU,2FACVC,iBAAkBH,KAAKT,YACvBa,aAAcJ,KAAKX,YAEnB,4BAAKJ,GACJe,KAAKjB,MAAMC,YACV,yBAAKkB,UAAU,sBACb,sCAAYhB,GACZ,oCAAUC,GACV,sCAAYC,S,GAtDFiB,aCePC,EAdK,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEnB,OADAT,QAAQC,IAAIQ,GAGR,yBAAKL,UAAU,qCAEPK,EAAOC,KAAI,SAAC1B,EAAQ2B,GAChB,OAAO,kBAAC,EAAD,CAASC,IAAK5B,EAAOG,KAAMH,OAAQA,SC8B/C6B,G,wDAnCb,aAAe,IAAD,8BACZ,gBACK5B,MAAQ,CACXwB,OAAQ,IAHE,E,gEAOO,IAAD,QACH,uCAAG,8BAAAK,EAAA,sEACSC,MAAM,gCADf,cACVC,EADU,gBAEIA,EAAWC,OAFf,OAEVC,EAFU,OAGhB,EAAKpB,SAAS,CAAEW,OAAQS,EAAMC,UAHd,2CAAH,qDAKfC,K,+BAIA,IAAMX,EAASP,KAAKjB,MAAMwB,OAC1B,OACE,yBAAKL,UAAU,UACb,wBAAIA,UAAU,wBACZ,yBACEiB,IAAI,YACJC,IAAI,gFACJlC,OAAO,WAGX,6BACE,kBAAC,EAAD,CAAaqB,OAAQA,U,GA7BbF,cCQEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.2d5bd0b8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Nametag extends Component {\n  constructor({ person }) {\n    super({ person });\n    this.state = {\n      isHovering: false,\n      name: person.name,\n      height: person.height,\n      mass: person.mass,\n      gender: person.gender\n    };\n\n    this.handleExit = this.handleExit.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n  }\n\n  toggleHoverState(state) {\n    return {\n      isHovering: !state.isHovering\n    };\n  }\n\n  handleStart(event) {\n    const nametag = event.target;\n    setTimeout(() => {\n      this.setState({ isHovering: true });\n    }, 150);\n    setTimeout(() => {\n      if (nametag.offsetHeight < 250) {\n        this.setState({ isHovering: false });\n      }\n    }, 151);\n  }\n\n  handleExit() {\n    setTimeout(() => {\n      this.setState({ isHovering: false });\n      console.log(2);\n    }, 10);\n  }\n\n  render() {\n    const { name, height, mass, gender } = this.state;\n    return (\n      <div\n        id=\"nametag\"\n        className=\"hover flex flex-column justify-center items-center box ba b--yellow white br4 ph4 mv3 f3\"\n        onAnimationStart={this.handleStart}\n        onMouseLeave={this.handleExit}\n      >\n        <h3>{name}</h3>\n        {this.state.isHovering && (\n          <div className=\"hover extendedInfo\">\n            <p>height: {height}</p>\n            <p>mass: {mass}</p>\n            <p>gender: {gender}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Nametag;\n","import React from 'react';\nimport Nametag from './Nametag';\n\nconst NametagList = ({ people }) => {\n    console.log(people);\n    return (\n        //<p>hello</p>\n        <div className='flex flex-wrap mh3 justify-around'>\n            {\n                people.map((person, i) => {\n                    return <Nametag key={person.name} person={person} />\n                }) \n            }\n        </div> \n    )\n}\n\nexport default NametagList\n","import React, { Component } from \"react\";\nimport NametagList from \"../components/NametagList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      people: []\n    };\n  }\n\n  componentDidMount() {\n    const getPeople = async () => {\n      const peopleData = await fetch(\"https://swapi.co/api/people/\");\n      const peeps = await peopleData.json();\n      this.setState({ people: peeps.results });\n    };\n    getPeople();\n  }\n\n  render() {\n    const people = this.state.people;\n    return (\n      <div className=\"tc box\">\n        <h1 className=\"f-headline ma0 white\">\n          <img\n            alt=\"Star Wars\"\n            src=\"http://loodibee.com/wp-content/uploads/Star-Wars-transparent-logo-300x300.png\"\n            height=\"300px\"\n          />\n        </h1>\n        <div>\n          <NametagList people={people} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}